{
  "name": "coverage-helpers",
  "version": "0.1.0",
  "description": "Insturments buffers and generates lcov compatible data from collected results to generate coverage reports.",
  "homepage": "http://tbd",
  "author": {
    "name": "Tobias Ebnöther"
  },
  "contributors": [
    {
      "name": "Tobias Ebnöther",
      "email": "ebi@gorn.ch",
      "url": "http://gorn.ch"
    }
  ],
  "main": "./lib/coverage-helpers",
  "repository": {
    "type": "git",
    "url": "git://gitorious.org/~ebi/coverage-helpers.git"
  },
  "dependencies": {
    "burrito": ">=0.2.11"
  },
  "readme": "# coverage-helpers\nThe prupose of this module is to provide helpers for node.js for instrumenting and generating lcov style reports.\n\n## API\n\n### instrument(buffer, \"filename\")\n* `buffer` has to contain the code that you want to instrument.\n* `filename` can be any string and will be used for the reporting.\n* The return value is a `buffer` with the instrumented code\n\nExecuting the instrumented code will create and fill an object called **_$Coverage**. The contents will look like this:\n\n    {\n        filename: {\n            linenumber: timesExecuted\n        }\n    }\n\n#### Example\n\n    var _$Coverage = {\n        'someJsFile.js': {\n            0: 1,\n            2: 1,\n            5: 3,\n            7: 0\n        }\n    };\n\n### generateLcov(executedLines)\n* `exectuedLines` is normaly just **_$Coverage** but you can pass anything that follows it's format.\n* The return value is a `string` that follows the LCOV Data style.\nThe output will look like this:\n\n    SF:someJsFile  \n    DA:0,1  \n    DA:2,1  \n    DA:5,3  \n    DA:7,0  \n    end_of_record\n\nYou can visualize this by saving this to a file and running `lcov -l coverage.dat` also `genhtml coverage.dat -o /tmp/report` will be your friend.\n\n### combineResults(executedLines[, executedLines, …])\n* `exectuedLines` is normaly just **_$Coverage** but you can pass anything that follows it's format.\n* You can pass as many `executedLines` as you want to combine for example multiple clients.\n* The return value is an `object` in the same format as **_$Coverage** but with all runs added up\n",
  "readmeFilename": "README.md",
  "_id": "coverage-helpers@0.1.0",
  "dist": {
    "shasum": "fd75090f79233905b4b25c4953b00efcef0f4721"
  },
  "_from": "coverage-helpers"
}
